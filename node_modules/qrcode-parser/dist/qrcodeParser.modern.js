import e from"jsqr";import t from"upng-js";const r=async r=>await new Promise((n,o)=>{const s=new FileReader;s.readAsArrayBuffer(r),s.addEventListener("loadend",()=>{const r=t.decode(s.result),a=t.toRGBA8(r)[0],i=e(new Uint8ClampedArray(a),r.width,r.height);null!==i?n(i.data):o(new Error("decode failed"))})});var n=async e=>{let t;return e instanceof File&&"[object File]"===Object.prototype.toString.call(e)?(t=e.slice(),r(t)):"string"==typeof e&&(e=>{try{return btoa(atob(e))===e}catch(e){return!1}})(e)?(t=((e,t="",r=512)=>{const n=atob(e),o=[];for(let e=0;e<n.length;e+=r){const t=n.slice(e,e+r),s=new Array(t.length);for(let e=0;e<t.length;e++)s[e]=t.charCodeAt(e);const a=new Uint8Array(s);o.push(a)}return new Blob(o,{type:t})})(e),r(t)):"string"==typeof e&&(e=>{if("string"!=typeof e)throw new TypeError("Expected a string");if((e=e.trim()).includes(" "))return!1;try{return new URL(e),!0}catch(e){return!1}})(e)?await new Promise((n,o)=>{const s=new XMLHttpRequest;s.open("GET",e),s.responseType="blob",s.onload=()=>{s.status>=200&&s.status<300?(t=s.response,r(t).then(e=>n(e)).catch(e=>o(e))):o(s.statusText)},s.onerror=()=>o(s.statusText),s.send()}):Promise.reject(new Error("The input type is invalid"))};export{n as default};
//# sourceMappingURL=qrcodeParser.modern.js.map
