{"version":3,"file":"qrcodeParser.es.js","sources":["../src/b64toBlob.ts","../src/utils.ts","../src/index.ts"],"sourcesContent":["//  Ref: https://stackoverflow.com/a/16245768\n\nconst b64toBlob = (\n  b64Data: string,\n  contentType = '',\n  sliceSize = 512,\n): Blob => {\n  const byteCharacters = atob(b64Data)\n  const byteArrays = []\n  for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n    const slice = byteCharacters.slice(offset, offset + sliceSize)\n    const byteNumbers = new Array(slice.length)\n    for (let i = 0; i < slice.length; i++)\n      byteNumbers[i] = slice.charCodeAt(i)\n\n    const byteArray = new Uint8Array(byteNumbers)\n\n    byteArrays.push(byteArray)\n  }\n\n  const blob = new Blob(byteArrays, { type: contentType })\n  return blob\n}\n\nexport default b64toBlob\n","import jsQR from 'jsqr'\nimport UPNG from 'upng-js'\n\nexport const blob2text = async(blob: Blob): Promise<string> => {\n  return await new Promise((resolve, reject) => {\n    const myReader: FileReader = new FileReader()\n    myReader.readAsArrayBuffer(blob)\n    myReader.addEventListener('loadend', () => {\n      const buffer = myReader.result\n      const img = UPNG.decode(buffer as ArrayBuffer)\n      const rgba = UPNG.toRGBA8(img)[0]\n      const code = jsQR(new Uint8ClampedArray(rgba), img.width, img.height)\n      if (code !== null)\n        resolve(code.data)\n      else\n        reject(new Error('decode failed'))\n    })\n  })\n}\n\nexport const isBase64 = (str: string): boolean => {\n  try {\n    return btoa(atob(str)) === str\n  }\n  catch (err) {\n    return false\n  }\n}\n\n// Copy from https://github.com/sindresorhus/is-url-superb\nexport const isUrl = (string: string): boolean => {\n  if (typeof string !== 'string')\n    throw new TypeError('Expected a string')\n\n  string = string.trim()\n  if (string.includes(' '))\n    return false\n\n  try {\n    new URL(string) // eslint-disable-line no-new\n    return true\n  }\n  catch {\n    return false\n  }\n}\n","import b64toBlob from './b64toBlob'\nimport { blob2text, isBase64, isUrl } from './utils'\n\nexport type Input = string | Blob\n\nexport default async(input: Input): Promise<string> => {\n  let blob: Blob\n\n  if (\n    input instanceof File\n    && Object.prototype.toString.call(input) === '[object File]'\n  ) {\n    blob = input.slice()\n    return blob2text(blob)\n  }\n  else if (typeof input === 'string' && isBase64(input)) {\n    blob = b64toBlob(input)\n    return blob2text(blob)\n  }\n  else if (typeof input === 'string' && isUrl(input)) {\n    return await new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest()\n      xhr.open('GET', input)\n      xhr.responseType = 'blob' // force the HTTP response, response-type header to be blob\n      xhr.onload = () => {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          blob = xhr.response // xhr.response is now a blob object\n          blob2text(blob)\n            .then(ret => resolve(ret))\n            .catch(e => reject(e))\n        }\n        else {\n          reject(xhr.statusText)\n        }\n      }\n      xhr.onerror = () => reject(xhr.statusText)\n      xhr.send()\n    })\n  }\n  else {\n    return Promise.reject(new Error('The input type is invalid'))\n  }\n}\n"],"names":["blob2text","blob","Promise","resolve","reject","myReader","FileReader","readAsArrayBuffer","addEventListener","img","UPNG","decode","result","rgba","toRGBA8","code","jsQR","Uint8ClampedArray","width","height","data","Error","input","File","Object","prototype","toString","call","slice","str","btoa","atob","err","isBase64","b64Data","contentType","sliceSize","byteCharacters","byteArrays","offset","length","byteNumbers","Array","i","charCodeAt","byteArray","Uint8Array","push","Blob","type","b64toBlob","string","TypeError","trim","includes","URL","isUrl","xhr","XMLHttpRequest","open","responseType","onload","status","response","then","ret","e","statusText","onerror","send"],"mappings":"2CAEA,ICCaA,WAAkBC,8BAChB,IAAIC,QAAQ,SAACC,EAASC,GACjC,IAAMC,EAAuB,IAAIC,WACjCD,EAASE,kBAAkBN,GAC3BI,EAASG,iBAAiB,UAAW,WACnC,IACMC,EAAMC,EAAKC,OADFN,EAASO,QAElBC,EAAOH,EAAKI,QAAQL,GAAK,GACzBM,EAAOC,EAAK,IAAIC,kBAAkBJ,GAAOJ,EAAIS,MAAOT,EAAIU,QACjD,OAATJ,EACFZ,EAAQY,EAAKK,MAEbhB,EAAO,IAAIiB,MAAM,uBAZH,+CCEDC,OACnB,IAAIrB,EAEJ,OACEqB,aAAiBC,MAC4B,kBAA1CC,OAAOC,UAAUC,SAASC,KAAKL,IAElCrB,EAAOqB,EAAMM,wBACN5B,EAAUC,KAEO,iBAAVqB,GDKM,SAACO,GACvB,IACE,OAAOC,KAAKC,KAAKF,MAAUA,EAE7B,MAAOG,GACL,UCVoCC,CAASX,IAC7CrB,EFdc,SAChBiC,EACAC,EACAC,YADAD,IAAAA,EAAc,aACdC,IAAAA,EAAY,KAIZ,IAFA,IAAMC,EAAiBN,KAAKG,GACtBI,EAAa,GACVC,EAAS,EAAGA,EAASF,EAAeG,OAAQD,GAAUH,EAAW,CAGxE,IAFA,IAAMR,EAAQS,EAAeT,MAAMW,EAAQA,EAASH,GAC9CK,EAAc,IAAIC,MAAMd,EAAMY,QAC3BG,EAAI,EAAGA,EAAIf,EAAMY,OAAQG,IAChCF,EAAYE,GAAKf,EAAMgB,WAAWD,GAEpC,IAAME,EAAY,IAAIC,WAAWL,GAEjCH,EAAWS,KAAKF,GAIlB,OADa,IAAIG,KAAKV,EAAY,CAAEW,KAAMd,IEJjCe,CAAU5B,mBACVtB,EAAUC,KAEO,iBAAVqB,GDWG,SAAC6B,GACpB,GAAsB,iBAAXA,EACT,UAAUC,UAAU,qBAGtB,IADAD,EAASA,EAAOE,QACLC,SAAS,KAClB,SAEF,IAEE,OADA,IAAIC,IAAIJ,MAGV,SACE,UCxBoCK,CAAMlC,mBAC7B,IAAIpB,QAAQ,SAACC,EAASC,GACjC,IAAMqD,EAAM,IAAIC,eAChBD,EAAIE,KAAK,MAAOrC,GAChBmC,EAAIG,aAAe,OACnBH,EAAII,OAAS,WACPJ,EAAIK,QAAU,KAAOL,EAAIK,OAAS,IAEpC9D,EADAC,EAAOwD,EAAIM,UAERC,KAAK,SAAAC,UAAO9D,EAAQ8D,WACd,SAAAC,UAAK9D,EAAO8D,KAGrB9D,EAAOqD,EAAIU,aAGfV,EAAIW,QAAU,kBAAMhE,EAAOqD,EAAIU,aAC/BV,EAAIY,UAICnE,QAAQE,OAAO,IAAIiB,MAAM,8BAnCpC"}