{"ast":null,"code":"import _asyncToGenerator from \"/home/michael/git/enqrypt-it/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/home/michael/git/enqrypt-it/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/home/michael/git/enqrypt-it/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"/home/michael/git/enqrypt-it/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport \"./Style/input.css\";\nimport React, { useState, useRef } from \"react\";\nimport StringEncryptorDecryptor from \"./Tools/StringEncryptorDecryptor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  var keyParams = {};\n  var subtleCrypto = window.crypto.subtle;\n  var encryptorDecryptor = new StringEncryptorDecryptor();\n  var enteredPassword = useRef(\"\");\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      encryptedPassword = _useState2[0],\n      setEncryptedPassword = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      decryptedPassword = _useState4[0],\n      setDecryptedPassword = _useState4[1];\n\n  var keyPair = useRef(null);\n\n  var handlePasswordChange = function handlePasswordChange(event) {\n    enteredPassword.current = event.target.value;\n    console.log(\"password changed\");\n  };\n\n  var encryptPassword = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return encryptorDecryptor.encryptString(enteredPassword.current);\n\n            case 3:\n              data = _context.sent;\n              _context.next = 10;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(\"Failed to encrypt data: \" + _context.t0);\n              return _context.abrupt(\"return\");\n\n            case 10:\n              setEncryptedPassword(data.encryptedString);\n              setDecryptedPassword(\"\");\n              console.log(\"Password successfully encrypted: \" + data);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 6]]);\n    }));\n\n    return function encryptPassword() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var decryptPassword = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var decryptedPassword;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return encryptorDecryptor.decryptArrayBuffer(encryptedPassword);\n\n            case 2:\n              decryptedPassword = _context2.sent;\n              setEncryptedPassword(null);\n              setDecryptedPassword(decryptedPassword);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function decryptPassword() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var encryptButton;\n  var decryptButton;\n\n  if (encryptedPassword === null) {\n    encryptButton = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: encryptPassword,\n        children: \"Encrypt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n    decryptButton = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decryptPassword,\n        disabled: true,\n        children: \"Decrypt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  } else {\n    encryptButton = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: encryptPassword,\n        disabled: true,\n        children: \"Encrypt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n    decryptButton = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decryptPassword,\n        children: \"Decrypt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: decryptedPassword\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"text_entry password_entry\",\n      onChange: handlePasswordChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), encryptButton, decryptButton]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"RTzEeZFRKIXHWskoqERZbeQQTC0=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/michael/git/enqrypt-it/src/App.tsx"],"names":["React","useState","useRef","StringEncryptorDecryptor","App","keyParams","subtleCrypto","window","crypto","subtle","encryptorDecryptor","enteredPassword","encryptedPassword","setEncryptedPassword","decryptedPassword","setDecryptedPassword","keyPair","handlePasswordChange","event","current","target","value","console","log","encryptPassword","encryptString","data","encryptedString","decryptPassword","decryptArrayBuffer","encryptButton","decryptButton"],"mappings":"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","sourcesContent":["import \"./Style/input.css\";\nimport React, { useEffect, useState, useRef } from \"react\";\n\nimport StringEncryptorDecryptor from \"./Tools/StringEncryptorDecryptor\";\nimport { EncryptedData } from \"./Tools/StringEncryptorDecryptor\";\n\nexport default function App() {\n\n  const keyParams = {};\n  const subtleCrypto = window.crypto.subtle;\n  const encryptorDecryptor = new StringEncryptorDecryptor();\n\n  const enteredPassword = useRef<string>(\"\");\n  const [encryptedPassword, setEncryptedPassword] = useState<ArrayBuffer | null>(null);\n  const [decryptedPassword, setDecryptedPassword] = useState<string>(\"\");\n  \n  const keyPair = useRef<CryptoKeyPair | null>(null);\n\n  const handlePasswordChange = function (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) {\n    enteredPassword.current = event.target.value;\n    console.log(\"password changed\");\n  };\n\n  const encryptPassword = async function (){\n    let data: EncryptedData;\n    try{\n      data = (await encryptorDecryptor.encryptString(enteredPassword.current)) as EncryptedData;\n    } catch(e) {\n      console.log(\"Failed to encrypt data: \" + e);\n      return;\n    }\n    setEncryptedPassword(data.encryptedString);\n    setDecryptedPassword(\"\");\n    console.log(\"Password successfully encrypted: \" + data);\n  }\n  \n  const decryptPassword = async function () {\n    let decryptedPassword: string = (await encryptorDecryptor.decryptArrayBuffer(encryptedPassword as ArrayBuffer));\n    setEncryptedPassword(null);\n    setDecryptedPassword(decryptedPassword);\n  }\n  \n  let encryptButton: JSX.Element;\n  let decryptButton: JSX.Element;\n  \n  if(encryptedPassword === null) {\n    encryptButton = \n      <>\n        <button\n          onClick={encryptPassword}\n        >\n          Encrypt\n        </button>\n      </>\n    decryptButton = \n      <>\n        <button\n          onClick={decryptPassword}\n          disabled\n        >\n         Decrypt\n        </button>\n      </>\n  } else {\n    encryptButton = \n      <>\n        <button\n          onClick={encryptPassword}\n          disabled\n        >\n          Encrypt\n        </button>\n      </>\n    decryptButton = \n      <>\n        <button\n          onClick={decryptPassword}\n        >\n         Decrypt\n        </button>\n      </>\n  }\n  return (\n    <div className=\"App\">\n      <h1>{decryptedPassword}</h1>\n      <input\n        type=\"text\"\n        className=\"text_entry password_entry\"\n        onChange={handlePasswordChange}\n      />\n      {encryptButton}\n      {decryptButton}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}